# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'controller.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.

c = BuildmasterConfig = {}

####################
# PROJECT IDENTITY #
####################

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Pyflakes"
c['titleURL'] = "https://launchpad.net/pyflakes"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

################
# BUILDWORKERS #
################

# The 'workers' list defines the set of recognized buildworkers. Each element 
# is a BuildSlave object (by outdated Builbot terminology) renamed as 
# BuildWorker, specifying a unique worker name and password.  The same worker
# name and password must be configured on the worker. 
#
# Within yocto-controller/controller.cfg make the following changes substituing
# <PASS> for your debug password and  max_builds for the number of builds you
# wish to run on each builder. Your main builder that will run the nightly 
# trigger buildset should have at least 2 build workers running.
#
#     c['workers'] = [BuildWorker("builder1", "<PASS>", max_builds=3),
#                     BuildWorker("builder2", "<PASS>", max_builds=3),]


from buildbot.buildslave import BuildSlave as BuildWorker
c['workers'] = [BuildWorker("example-worker", "pass", max_builds=3),]

# 'workerPortnum' defines the TCP port to listen on for connections from 
# workers. This must match the value configured into the buildworkers 
# (with their --master option)

c['workerPortnum'] = 9989

############
# BUILDERS #
############

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand

factory = BuildFactory()

# check out the source
factory.addStep(Git(repourl='git://github.com/buildbot/pyflakes.git', mode='incremental'))

# run the tests (note that this will require that 'trial' is installed)
factory.addStep(ShellCommand(command=["trial", "pyflakes"]))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="runtests",
        slavenames=["example-worker"],
        factory=factory))

#################
# CHANGESOURCES #
#################

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(
    GitPoller(
        'git://github.com/buildbot/pyflakes.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))

##############
# SCHEDULERS #
##############

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(
    SingleBranchScheduler(
        name="all",
        change_filter=filter.ChangeFilter(branch='master'),
        treeStableTimer=None,
        builderNames=["runtests"]))
c['schedulers'].append(
    ForceScheduler(
        name="force",
        builderNames=["runtests"]))

##################
# STATUS TARGETS #
##################

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("pyflakes","pyflakes")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

##########
# CONFIG #
##########

from config import *

c['builders'] = YOCTO_BUILDERS
c['change_source'] = YOCTO_SOURCES
c['schedulers'] = YOCTO_SCHED
c['projectName'] = YOCTO_PROJNAME
c['projectURL'] = YOCTO_PROJURL

##########
# DB URL #
##########

# This specifies what database buildbot uses to store its state.  You can leave
# this at its default for all but the largest installations.

c['db'] = {'db_url' : "sqlite:///state.sqlite",}

############
# POINTERS #
############

# Point outdated buildbot terminology at our updated terms

c['slavePortnum'] = c['workerPortnum']
c['slaves'] = c['workers']
