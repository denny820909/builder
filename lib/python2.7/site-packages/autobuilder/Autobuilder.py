'''
Created on Dec 4, 2012

__author__ = "Elizabeth 'pidge' Flanagan"
__copyright__ = "Copyright 2013, Intel Corp."
__credits__ = ["Elizabeth Flanagan"]
__license__ = "GPL"
__version__ = "2.0"
__maintainer__ = "Elizabeth Flanagan"
__email__ = "elizabeth.flanagan@intel.com"
'''
#!/usr/bin/python
from twisted.python import log
from config import *
from buildbot.schedulers.forcesched import *

class Autobuilder:
    def __init__(self, cfile=None):
        self.yocto_sources = YOCTO_SOURCES
        self.yocto_sched = YOCTO_SCHED
        self.yocto_builders = YOCTO_BUILDERS
        self.yocto_projname = YOCTO_PROJNAME
        self.yocto_projurl = YOCTO_PROJURL
        self.config = None
        import os, config
        if cfile is None:
            try:
                self.cfile = os.environ.get("YOCTO_AB_CONFIG")
            except:
                self.cfile = "./config/yoctoAB.conf"

    def parseConfig(self):
        import ConfigParser
        print "LOADING CONFIG FILE"
        self.config = ConfigParser.ConfigParser()
        try:
            self.config.read(self.cfile)
        except:
            print "Can't seem to find the Config file. Is YOCTO_AB_CONFIG set?"
        self.buildsets=self.config.sections()
        self.configdict = {}
        for section in self.buildsets:
            self.configdict[section]= dict(self.config.items(section))
        return self.configdict

    def createBuildsets(self):
        import BuildSet
        import ast
        beenHere=[]
        for set in ast.literal_eval(self.config.get('BuildSets', 'order')):
            beenHere.append(set)
        for key in self.configdict:
            if key not in beenHere and key != "BuildSets":
                beenHere.append(key)
        # REALLY crappy way to do this, but better than setting globals. 
        os.environ["YOCTO_SORTED_BUILDERS"]= str(beenHere)
        for key in beenHere:
            if key != "BuildSets":
                locals()['buildset_%s' % key]=BuildSet.BuildSet(name=key,
                                                                steps=ast.literal_eval(self.configdict[key]['steps']), 
                                                                builders=ast.literal_eval(self.configdict[key]['builders']), 
                                                                layers=ast.literal_eval(self.configdict[key]['layers']))
                schedprops = []
                cb = {}
                for layer in ast.literal_eval(self.configdict[key]['layers']):
                    layername=layer.iterkeys().next()
                    layerrepo=layer[layer.iterkeys().next()]['repourl']
                    if 'hash' in layer[layer.iterkeys().next()] :
                        layerbranch=layer[layer.iterkeys().next()]['hash']
                    elif 'tag' in layer[layer.iterkeys().next()]:
                        layerbranch=layer[layer.iterkeys().next()]['tag']
                    elif 'branch' in layer[layer.iterkeys().next()]:
                        layerbranch=layer[layer.iterkeys().next()]['branch']
                    else:
                        layerbranch="master"
                    if 'bbpriority' in layer[layer.iterkeys().next()]:
                        layerpriority=layer[layer.iterkeys().next()]['bbpriority']
                    else:
                        layerpriority=""
    # codebases need documentation and some help on the UI side (defaults doesn't seem supported)
    #                cb_dict={}
    #                cb_dict['branch']=layerbranch
    #                cb_dict['label']=layerbranch + " defaults: <hr>"
    #                cb_dict['repository']=layerrepo
    #                cb["cb_"+layerbranch]=cb_dict
    #                schedprops.append(NestedParameter(name='ss_' + layername, label="<br>" + layername + " defaults:<br><hr>", fields=[StringParameter(name="repo_"+layername,label="Repository:<br>",
    #                                    required=True, default=layerrepo, size=80),StringParameter(name="branch_"+layername,label="Branch/Tag/Hash:<br>",
    #                                    required=True, default=layerbranch, size=80)]))
                    schedprops.append(NestedParameter(name='ss_' + layername, label="<br>" + layername + " defaults:<br><hr>", fields=[FixedParameter(name="dummy", default="dummy")]))
                    schedprops.append(StringParameter(name="repo_"+layername,label="Repository:<br>", required=True, default=layerrepo, size=80))
                    schedprops.append(StringParameter(name="branch_"+layername,label="Branch/Tag/Hash:<br>", required=True, default=layerbranch, size=80))
                schedprops.append(BooleanParameter(name="cleanSSTATE", label="Clean SSTATE Cache:", default=False))
                self.yocto_sched.append(ForceScheduler(
                                    name=str(key),
                                    branch=FixedParameter(name="branch", default=""),
                                    reason=StringParameter(name="reason",label="Reason:<br>",
                                                           required=False, size=120),
                                    revision=FixedParameter(name="revision", default=""),
                                    repository=FixedParameter(name="repository", default=""),
                                    project=FixedParameter(name="repository", default=""),
                                    builderNames=['%s' % key],
                                    properties=schedprops))
