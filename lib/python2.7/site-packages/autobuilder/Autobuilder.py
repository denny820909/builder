'''
Created on Dec 4, 2012

__author__ = "Elizabeth 'pidge' Flanagan"
__copyright__ = "Copyright 2013, Intel Corp."
__credits__ = ["Elizabeth Flanagan"]
__license__ = "GPL"
__version__ = "2.0"
__maintainer__ = "Elizabeth Flanagan"
__email__ = "elizabeth.flanagan@intel.com"
'''
#!/usr/bin/python
from twisted.python import log
from config import *
from buildbot.schedulers.forcesched import *
from buildbot.schedulers.triggerable import Triggerable

class Autobuilder:
    def __init__(self, cfile=None):
        self.yocto_sources = YOCTO_SOURCES
        self.yocto_sched = YOCTO_SCHED
        self.yocto_builders = YOCTO_BUILDERS
        self.yocto_projname = YOCTO_PROJNAME
        self.yocto_projurl = YOCTO_PROJURL
        self.config = None
        import os, config
        if cfile is None:
            try:
                self.cfile = os.environ.get("YOCTO_AB_CONFIG")
            except:
                self.cfile = "./config/yoctoAB.conf"


    def createBuildsets(self):
        import BuildSet
        import ast
        beenHere=[]
        for set in ast.literal_eval(self.config.get('BuildSets', 'order')):
            beenHere.append(set)
        for key in self.configdict:
            if key not in beenHere and key != "BuildSets":
                beenHere.append(key)
        # REALLY crappy way to do this, but better than setting globals. 
        os.environ["YOCTO_SORTED_BUILDERS"]= str(beenHere)
        for key in beenHere:
            builders=ast.literal_eval(self.configdict[key]['builders']), 
            if key is not "BuildSets":
                schedprops = []
                checkoutprops={}
                set_props = {}
                for layer in ast.literal_eval(self.configdict[key]['layers']):
                    schedpropstoextend, checkoutprops = self.CreateLayerSchedulerParams(layer=layer, trigger=None)
                    schedprops.extend(schedpropstoextend)

                for step in ast.literal_eval(self.configdict[key]['steps']):
                    if step.has_key('TriggerBuilds'):
                        layername=layer.iterkeys().next()
                        schedprops.append(NestedParameter(name='blank_triggered_builds', label="<h3> Layers within triggered builds. These will not inherit the main repo/branch.<hr><h3>", fields=[FixedParameter(name="dummy", default="dummy")]))
                        for scheduler in step['TriggerBuilds']['schedulerNames'].iterkeys():
                            for triggered_layer in ast.literal_eval(self.configdict[scheduler]['layers']):
                                log.msg("Trigger: " +scheduler +" "+  triggered_layer.iterkeys().next())
                            for triggered_layer in ast.literal_eval(self.configdict[scheduler]['layers']):
                                schedpropstoextend, checkoutprops = self.CreateLayerSchedulerParams(layer=triggered_layer, trigger=scheduler)
                                schedprops.extend(schedpropstoextend)
                            buildername=[]
                            buildername.append(scheduler)
                            self.yocto_sched.append(Triggerable(name="trigger_" + scheduler, builderNames=buildername))
                set_props.update(checkoutprops)
                locals()['buildset_%s' % key]=BuildSet.BuildSet(name=key,
                                                                steps=ast.literal_eval(self.configdict[key]['steps']), 
                                                                builders=ast.literal_eval(self.configdict[key]['builders']),
                                                                layers=ast.literal_eval(self.configdict[key]['layers']),
                                                                set_props=set_props)
                self.yocto_sched.append(ForceScheduler(
                                    name=str(key),
                                    branch=FixedParameter(name="branch", default=""),
                                    reason=StringParameter(name="reason",label="Reason:<br>",
                                                           required=False, size=120),
                                    revision=FixedParameter(name="revision", default=""),
                                    repository=FixedParameter(name="repository", default=""),
                                    project=FixedParameter(name="repository", default=""),
                                    builderNames=['%s' % key],
                                    properties=schedprops))

    def parseConfig(self):
        import ConfigParser
        print "LOADING CONFIG FILE"
        self.config = ConfigParser.ConfigParser()
        try:
            self.config.read(self.cfile)
        except:
            print "Can't seem to find the Config file. Is YOCTO_AB_CONFIG set?"
        self.buildsets=self.config.sections()
        self.configdict = {}
        for section in self.buildsets:
            self.configdict[section]= dict(self.config.items(section))
        return self.configdict


    def GetLayerBranch(self, layer):
            if 'hash' in layer[layer.iterkeys().next()] :
                layerbranch=layer[layer.iterkeys().next()]['hash']
            elif 'tag' in layer[layer.iterkeys().next()]:
                layerbranch=layer[layer.iterkeys().next()]['tag']
            elif 'branch' in layer[layer.iterkeys().next()]:
                layerbranch=layer[layer.iterkeys().next()]['branch']
            else:
                layerbranch="master"
            return layerbranch

    def capitalize(self, word):
        return ' '.join([s[0].upper() + s[1:] for s in word.split(' ')])

    def CreateLayerSchedulerParams(self, layer=None, trigger=None):
            schedprops = []
            set_checkoutprops = {}
            if trigger is None:
                layername=layer.iterkeys().next()
                layerlabel=self.capitalize(layer.iterkeys().next())
            else:
                layername="trigger_" + trigger + "_" + layer.iterkeys().next()
                layerlabel=self.capitalize(trigger) + " " + self.capitalize(layer.iterkeys().next())
                set_checkoutprops['repo_' + layername] = 'repo_' + layername
                set_checkoutprops['branch_' + layername] = 'branch_' + layername
                set_checkoutprops['bb_' + layername] = 'bb_' + layername
            layerrepo=layer[layer.iterkeys().next()]['repourl']
            layerbranch=self.GetLayerBranch(layer)
            schedprops.append(NestedParameter(name='ss_' + layername, label="<h3>" + layerlabel + " defaults:</h3>", fields=[FixedParameter(name="dummy", default="dummy")]))
            schedprops.append(StringParameter(name="repo_"+ layername, label="Repository:<br>", required=True, default=layerrepo, size=80))
            schedprops.append(StringParameter(name="branch_" + layername, label="Branch/Tag/Hash:<br>", required=True, default=layerbranch, size=80))
            if 'bbpriority' in layer[layer.iterkeys().next()]:
                layerpriority=layer[layer.iterkeys().next()]['bbpriority']
                schedprops.append(StringParameter(name="bb_" + layername,label="Layer Priority: ", required=False, default=layerpriority, size=2))
            else:
                schedprops.append(StringParameter(name="bb_" + layername,label="Layer Priority: ", required=False, size=2))


            return schedprops, set_checkoutprops

