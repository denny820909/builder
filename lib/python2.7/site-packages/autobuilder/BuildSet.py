'''
Created on Dec 17, 2012

__author__ = "Elizabeth 'pidge' Flanagan"
__copyright__ = "Copyright 2013, Intel Corp."
__credits__ = ["Elizabeth Flanagan"]
__license__ = "GPL"
__version__ = "2.0"
__maintainer__ = "Elizabeth Flanagan"
__email__ = "elizabeth.flanagan@intel.com"
'''

#!/usr/bin/python

from config import *
from twisted.python import log
from buildsteps import *
import ast
from buildsteps import YoctoBlocker
from buildsteps import NoOp
from buildbot.process import factory as factory
from buildbot.steps.shell import ShellCommand
from buildbot.process.properties import Property, PropertiesMixin, renderer
from buildbot.steps.trigger import Trigger

class BuildSet():
    '''
    classdocs
    '''
    def __init__(self, name, layers, steps, builders, set_props={}):
        '''
        Constructor
        '''
        locals()['f'+name] = factory.BuildFactory()
        for stepOrder in steps:
            for step in dict(stepOrder):
                factoryFN=getattr(locals()['f'+name], 'addStep')
                if step=="PublishLayerTarballs":
                    for layer in layers:
                        kwargs=stepOrder[step]
                        layername=layer.iterkeys().next()
                        if layer[layer.iterkeys().next()].has_key('checkout') and layer[layer.iterkeys().next()]['checkout'] == False: 
                            pass
                        else:
                            if layername == "poky" or layername == 'oecore':
                                workdir = 'build'
                            elif "eclipse-poky" in layername: 
                                workdir=os.path.join("build", layername)
                            else:
                                workdir=os.path.join("build", layername)
                            m = __import__ (step)
                            func = getattr(m, step)
                            factoryFN(func(locals()['f'+name],
                                      layername=layername,
                                      workdir=workdir,
                                      argdict=layer[layer.iterkeys().next()]))
                elif step=="CheckOutLayers":
                # All steps need the factory passed as the first param
                    for layer in layers:
                        kwargs=stepOrder[step]
                        layername=layer.iterkeys().next()
                        if 'checkout' in layer[layer.iterkeys().next()]:
                            if layer[layer.iterkeys().next()]['checkout'] == False: 
                                pass
                        else:
                            if layername == "poky" or layername == 'oecore':
                                workdir = 'build'
                                method = 'clobber'
                            elif "eclipse-poky" in layername:
                                workdir=os.path.join("build", layername)
                                method = 'clobber'
                            else:
                                workdir=os.path.join("build", layername)
                                method = None
                            m = __import__ (step)
                            func = getattr(m, step)
                            factoryFN(func(locals()['f'+name],
                                      layername=layername,
                                      scheduler=name,
                                      method=method,
                                      workdir=workdir,
                                      argdict=layer[layer.iterkeys().next()]))
                            if 'layerversion' in layer[layer.iterkeys().next()]:
                                m = __import__ ("GetLayerVersion")
                                func = getattr(m, "GetLayerVersion")
                                for layerversion_name, layerversion_path in layer[layer.iterkeys().next()]['layerversion'].iteritems():
                                    factoryFN(func(locals()['f'+name],
                                              layerversion=layerversion_name,
                                              workdir=layerversion_path,
                                              argdict={}))

                elif step=="CreateBBLayersConf":
                    kwargs=stepOrder[step]
                    m = __import__ (step)
                    func = getattr(m, step)
                    factoryFN(func(locals()['f'+name], 
                              layers,
                              argdict=stepOrder[step]))
                elif step=="TriggerBuilds":
                    for x in stepOrder[step].iterkeys():
                        if x == 'schedulerNames':
                            upstreamSteps = []
                            for scheduler in stepOrder[step][x]:
                                upstreamStep = scheduler, "NoOp" + scheduler
                                upstreamSteps.append(upstreamStep)
                                set_properties = {}
                                copy_properties = []
                                waitForFinish = False
                                set_properties['DEST']= Property("DEST")
                                for layer in layers:
                                    layername=layer.iterkeys().next()
                                    set_properties['repo_trigger_' + layername +"_"+ scheduler] = Property('repo_trigger_' + layername +"_"+ scheduler)
                                    set_properties['branch_trigger_' + layername +"_"+ scheduler] = Property('branch_trigger_' + layername +"_"+ scheduler)
                                    set_properties['commit_trigger_' + layername +"_"+ scheduler] = Property('commit_trigger_' + layername +"_"+ scheduler)
                                    set_properties['bb_trigger_' + layername +"_"+ scheduler] = Property('bb_trigger_' + layername +"_"+ scheduler)
                                if stepOrder[step][x][scheduler]:
                                    for prop in stepOrder[step][x][scheduler].iterkeys():
                                        if prop=="set_properties":
                                            for p in stepOrder[step][x][scheduler][prop].iterkeys():
                                                set_properties[p]=stepOrder[step][x][scheduler][prop][p]
                                        elif prop=="copy_properties":
                                            for p in stepOrder[step][x][scheduler][prop]:
                                                copy_properties.append('%s' % p)
                                        else:
                                            setattr(self, prop, stepOrder[step][x][scheduler][prop])
                                factoryFN(Trigger(schedulerNames=['%s' % 'trigger_'+scheduler],
                                                  updateSourceStamp=True,
                                                  set_properties=set_properties,
                                                  copy_properties=copy_properties,
                                                  waitForFinish=waitForFinish))
                            factoryFN(YoctoBlocker.YoctoBlocker(idlePolicy="block", timeout=62400, upstreamSteps=upstreamSteps))
                else:
                    kwargs=stepOrder[step]
                    m = __import__ (step)
                    func = getattr(m, step)
                    factoryFN(func(locals()['f'+name],
                              argdict=stepOrder[step]))
        locals()['f'+name].addStep(NoOp.NoOp(name="NoOp" + name))
        locals()['b%s' % name] = {'name': name,
                            'slavenames': builders,
                            'builddir': name,
                            'factory': locals()['f'+name],
                            }
        yocto_builders=YOCTO_BUILDERS
        yocto_builders.append(locals()['b%s' % name])
