'''
Created on Jan 11, 2013

__author__ = "Elizabeth 'pidge' Flanagan"
__copyright__ = "Copyright 2012-2013, Intel Corp."
__credits__ = ["Elizabeth Flanagan"]
__license__ = "GPL"
__version__ = "2.0"
__maintainer__ = "Elizabeth Flanagan"
__email__ = "elizabeth.flanagan@intel.com"
'''

from buildbot.steps.shell import ShellCommand
from twisted.python import log
import os, datetime 
from autobuilder.config import *

class PublishArtifacts(ShellCommand):

    haltOnFailure = False 
    flunkOnFailure = True 
    name = "Publishing Artifacts" 
    def __init__(self, factory, argdict=None, **kwargs):
        self.factory = factory
        self.description = "Publishing Artifacts"
        self.slavedir=os.path.join(os.path.join(YOCTO_ABBASE, "yocto-slave"))
        for k, v in argdict.iteritems():
            setattr(self, k, v)
        self.timeout = 100000
        kwargs['timeout']=self.timeout
        ShellCommand.__init__(self, **kwargs)

    def start(self):
        DEST=self.getProperty("DEST")
        buildername=self.getProperty("buildername")
        got_revision_poky=self.getProperty("got_revision_poky")
        distroversion=self.getProperty("distroversion")
        self.basedir=os.path.join(os.path.join(
                                    self.slavedir, buildername), 
                                    "build/build/")
        command=""
        DATESTAMP=datetime.datetime.now().strftime("%Y%m%d")
        log.msg("Publishing " + str(self.artifacts))
        if str(os.environ.get('PUBLISH_BUILDS')) == "True":
            for artifact in self.artifacts:
                log.msg("Publishing " + str(artifact))
                if artifact == "adt-installer":
                    command=command+"mkdir -p " + os.path.join(DEST, "adt_installer") + ";"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                    os.path.join(self.basedir, "tmp/deploy/sdk/") + \
                                    "*adt* " + os.path.join(DEST, "adt_installer")
                elif artifact == "adt-installer-QA":
                    command=command+"mkdir -p " + os.path.join(DEST, "adt_installer-QA") + ";"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                    os.path.join(self.basedir, "tmp/deploy/sdk/") + \
                                    "*adt* " + os.path.join(DEST, "adt_installer-QA")
                elif artifact == "adtrepo-dev":
                    adt_dev_dest= os.environ.get("ADTREPO_DEV_PATH") + "/" + distroversion + "-" + got_revision_poky
                    command=command+"mkdir -p " + adt_dev_dest + "/adt-ipk;"
                    command=command+"cp -R build/tmp/deploy/ipk" + adt_dev_dest + "/adt-ipk;"
                    command=command+"mkdir -p " + adt_dev_dest + "/rootfs;" 
                    command=command+"for x in `ls " + DEST + "/machines/qemu/|grep -v tiny`; do ln -s " + DEST + "/machines/qemu/$x " + adt_dev_dest + "/rootfs/$x; done;"
                    command=command+"mv " + adt_dev_dest + "/rootfs/qemux86-64 " + adt_dev_dest + "/rootfs/qemux86_64;" 
                elif artifact == "eclipse-plugin":
                    command=command+"mkdir -p " + DEST + "/eclipse-plugin;"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                     os.path.join(os.path.join(self.slavedir, buildername), 
                                                 "build/eclipse-poky/scripts/org.*.zip") + \
                                     " " + DEST + "/eclipse-plugin;"
                elif artifact == "build-appliance":
                    command=command+"mkdir -p " + DEST + "/" + artifact + ";"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                    os.path.join(self.basedir, "tmp/deploy/images/*.zip") + \
                                    " " + DEST + "/" + artifact + ";"
                elif artifact == "rpm":
                    command=command+"mkdir -p " + os.path.join(DEST, artifact) + ";"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                    os.path.join(self.basedir, "tmp/deploy/rpm/* ") + \
                                    " " + DEST + "/" + artifact + ";"
                elif artifact == "deb":
                    command=command+"mkdir -p " + os.path.join(DEST, artifact) + ";"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                    os.path.join(self.basedir, "tmp/deploy/deb/* ") + \
                                    os.path.join(DEST, artifact) + ";"
                elif artifact == "ipk":
                    command=command+"mkdir -p " + os.path.join(DEST, artifact) + ";"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                    os.path.join(self.basedir, "tmp/deploy/ipk/* ") + \
                                    os.path.join(DEST, artifact) + ";"
                elif "qemu" in artifact:
                    command=command+"mkdir -p " + DEST + "/machines/qemu/" + artifact + ";"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                    os.path.join(self.basedir, "tmp/deploy/images/") + \
                                    "* " + DEST + "/machines/qemu/" + artifact + ";"
                else:
                    command=command+"mkdir -p " + DEST + "/machines/" + artifact + ";"
                    command=command+"cp -R --no-dereference --preserve=links " + \
                                     os.path.join(self.basedir, "tmp/deploy/images/") + \
                                     "*"+artifact+"* " + DEST + "/machines/" + artifact + ";"
            self.command = command
        else:
            self.command = "echo 'Skipping Step.'"
        ShellCommand.start(self)

    def describe(self, done=False):
        description = ShellCommand.describe(self,done)
        return description

