'''
Created on Jan 6, 2013

__author__ = "Elizabeth 'pidge' Flanagan"
__copyright__ = "Copyright 2012-2013, Intel Corp."
__credits__ = ["Elizabeth Flanagan"]
__license__ = "GPL"
__version__ = "2.0"
__maintainer__ = "Elizabeth Flanagan"
__email__ = "elizabeth.flanagan@intel.com"
'''


from buildbot.steps.shell import ShellCommand
from buildbot.process.buildstep import LogLineObserver
import os

class BuildImages(ShellCommand):
    haltOnFailure = False 
    flunkOnFailure = True 
    name = "Building Images" 
    def __init__(self, factory, argdict=None, **kwargs):
        self.images=""
        self._pendingLogObservers = []
        self.factory = factory
        for k, v in argdict.iteritems():
            setattr(self, k, v)
        # Timeout needs to be passed to LoggingBuildStep as a kwarg
        self.timeout = 100000
        kwargs['timeout']=self.timeout
        ShellCommand.__init__(self, **kwargs)

    def start(self):
        layerversion_yoctobsp = self.getProperty("layerversion_yoctobsp")
        machine = self.getProperty("MACHINE")
        if layerversion_yoctobsp is not None and int(layerversion_yoctobsp) < 2 and machine == "genericx86_64":
            self.command = "echo 'Skipping Step.'"
            self.description = "genericx86_64 does not exist in this branch. Skipping"
        else:
            self.command = ". ./oe-init-build-env; bitbake " + self.images
            self.description = "Building " + str(self.images)
        ShellCommand.start(self)

    def describe(self, done=False):
        description = ShellCommand.describe(self,done)
        return description

    def getText(self, cmd, results):
        text = self.describe(True)[:]
        return text

