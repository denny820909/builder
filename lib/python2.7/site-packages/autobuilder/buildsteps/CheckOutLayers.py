'''
Created on Jan 10, 2012

__author__ = "Elizabeth 'pidge' Flanagan"
__copyright__ = "Copyright 2013, Intel Corp."
__credits__ = ["Elizabeth Flanagan"]
__license__ = "GPL"
__version__ = "2.0"
__maintainer__ = "Elizabeth Flanagan"
__email__ = "elizabeth.flanagan@intel.com"
'''

from buildbot.steps.source import Git
from twisted.python import log
import os

class CheckOutLayers (Git):
    haltOnFailure = True 
    flunkOnFailure = True 
    name = "CheckOutLayers" 
    def __init__(self, factory, layername="", argdict=None, **kwargs):
        # Yes, branches, tags, hashes are all the same in git. Some people
        # don't get that, so we're going to make sure they do by allowing them
        # to send the buildbot Git branch property as branch, tag or hash. If 
        # they more than one, we will utilize hash as first priority, tag, 
        # second and branch last.
        """
        @type layername: string
        @param layername: the name of the layer

        @type  repourl: string
        @param repourl: the URL which points at the git repository

        @type  branch: string
        @param branch: The branch to check out by default.

        @type  tag: string
        @param tag: The tag to check out by default. 

        @type  hash: string
        @param hash: The hash to check out by default.

        @type  workdir: string
        @param workdir: Where to checkout by default
        """
        print argdict
        self.factory = factory
        self.hash = ""
        self.tag = ""
        self.branch = ""
        self.repourl = ""
        for k, v in argdict.iteritems():
            setattr(self, k, v)
            log.msg("setting " + str(k) + " " + str(v))
        if isinstance(self.hash, str) and self.hash:
            self.branch=self.hash
        elif isinstance(self.tag, str) and self.tag:
            self.branch=self.tag
        elif isinstance(self.branch, str) and not self.branch:
            self.branch == "master"
        self.description = "Checking out " + layername
        log.msg("Checking out " + layername)
        if layername == "poky":
            self.workdir = 'build'
            self.mode = 'clobber'
            log.msg("setting workdir to build")
        elif layername == "eclipse-poky":
            self.workdir=os.path.join("build", layername)
            self.mode = 'clobber'
            log.msg("setting workdir to build/" + layername)
        else:
            self.workdir=os.path.join("build", layername)
            self.mode = 'update'
            log.msg("setting workdir to build/" + layername)

        Git.__init__(self, mode=self.mode, workdir=self.workdir, repourl=self.repourl, 
                    branch=self.branch, 
                    progress=True)

    def start(self):
        Git.start(self)

    def describe(self, done=False):
        return self.description

